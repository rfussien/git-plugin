#!/usr/bin/env bash

set -euo pipefail  # Exit on error, undefined vars, and pipeline failures

VERSION="1.0.0"

show_usage() {
    cat << EOF
Usage: git autocommit [TYPE]

Automatically commit changes using branch name as commit message.

Options:
    -h, --help      Show this help message
    --version       Show version information

Arguments:
    TYPE            Commit type (default: feat)
                   Examples: feat, fix, docs, style, refactor, test, chore
EOF
}

show_version() {
    echo "git autocommit version $VERSION"
}

is_git_repository() {
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "fatal: not a git repository" >&2
        return 1
    fi
    return 0
}

has_changes() {
    if [[ -z "$(git status --porcelain)" ]]; then
        echo "nothing to commit, working tree clean"
        return 1
    fi
    return 0
}

get_branch_name() {
    git branch --show-current | tr '-' ' '
}

check_main_branch() {
    local current_branch
    current_branch=$(git branch --show-current)
    
    if [[ "$current_branch" == "main" ]] || [[ "$current_branch" == "master" ]]; then
        echo "Warning: You are on $current_branch branch. Are you sure you want to commit? (y/N)"
        read -r response
        if [[ ! "${response:-n}" =~ ^[Yy]$ ]]; then
            echo "Commit cancelled"
            return 1
        fi
    fi
    return 0
}

create_commit() {
    local commit_type="$1"
    local branch_name="$2"
    
    if ! git add .; then
        echo "Error staging changes" >&2
        return 1
    fi

    local commit_message="$commit_type: #$branch_name"
    if ! git commit -m "$commit_message"; then
        echo "Error creating commit" >&2
        return 1
    fi

    echo "Successfully committed changes with message: $commit_message"
    return 0
}

main() {
    if [ "${1:-}" = "--version" ]; then
        show_version
        exit 0
    fi

    if [ "${1:-}" = "-h" ] || [ "${1:-}" = "--help" ]; then
        show_usage
        exit 0
    fi

    local commit_type="${1:-feat}"

    if ! is_git_repository; then
        exit 1
    fi

    if ! has_changes; then
        exit 0
    fi

    local branch_name
    branch_name=$(get_branch_name)

    if ! check_main_branch; then
        exit 0
    fi

    if ! create_commit "$commit_type" "$branch_name"; then
        exit 1
    fi
}

# Only run main if the script is being executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
